

#Strategy

This has been a bumpy ride, but the way we call cpp functions (starting from the cpp end) is as follows:

- Develop pure cpp code in the `src/` directory, but use symbolic links to test in `withoutR\cpp`
- Write a cpp test file, in `withoutR/cpp`
- Write a cpp wrapper that uses R data structures and converts between
- Create R using `devtools::document()` and or `devtools::build()`


#How `R_iso_seq` works

- calls `pepFromSequence`, which subtracts the ASCII value for `A` (65) from the letter to give an integer representation of the amino acid. These codes are stored in the `NUMSEQ` variable, and the whole structure is passed as the first argument to `R_iso`
- calls `R_iso` to get the isotope distributions



#How `R_iso` works


*This should form the basis of the `R_iso_atom` function that we are trying to write*

- `numpep` = 1, `numiso` = 5, otherwise it won't work
- load amino acid table `AMINODATA`
- create the following variables:
 	- *peptide* - a double of size `NUMELEMENTS`  	
 	- *element* - This is an array of `ISOTAB` structs. This is populated using the `R_loadIsotopeTable` function. The original iso function parsed >1 peptide, here `numpep` always == 1. Here the word "element" means the component of the total isotopic mass (I think). 
 	- *letter* - `letter[i].element[k] = AMINODATA[i][k]` where 26 letters `i` and five elements `k` are used - showing the composition of elements in each of the 26 amino acid codes. - Enter a `for` loop which only iterates once because of the value of `numpep`
- accumulate the number of elements in the appropriate slot of the peptide variable



